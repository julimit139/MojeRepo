#pragma once
#include "stale.h"
#include "karta.h"
#include "talia.h"

class Reka
{
	std::vector<Karta> reka;			//wektor kart - rêka gracza
	Kolor kolorAtutowy;			//pole z kolorem atutowym 
public:
	Reka(Talia & talia);			//konstruktor obiektu klasy Reka
	//Karta & operator[](int indeks);				//prze³adowany operator indeksowania, umo¿liwia dostanie siê do konkretnego elementu tablicy
	//void pobierz_karte(Talia & talia, int indeks);			//funkcja pobieraj¹ca kartê z talii/ze stosu
	//Karta & wez_karte_spod_indeksu_1(int indeks);			//funkcja pobieraj¹ca kartê spod indeksu - wersja do pierwszej czêœci gry
	//Karta & wez_karte_spod_indeksu_2(int indeks, int * tab);			//funkcja pobieraj¹ca kartê spod indeksu - wersja do drugiej czêœci gry
	//int znajdz_indeks(Karta karta);				//funkcja znajduj¹ca indeks podanej karty
	//Karta dobierz_karte_1(Karta karta_wylozona);			//funkcja dobieraj¹ca kartê do wy³o¿onej przez cz³owieka w pierwszej czêœci gry 
	//Karta dobierz_karte_2(Karta karta_wylozona, int * tab);				//funkcja dobieraj¹ca kartê do wy³o¿onej przez cz³owieka w drugiej czêœci gry
	//void wyswietl_aktualna_reke();			//funkcja wyœwietlaj¹ca aktualn¹ rêkê
	//void wyswietl_aktualna_reke_pomniejszona(int * tab);			//funkcja wyœwietlaj¹ca aktualn¹ pomniejszon¹ rêkê
	//int sprawdz_warunek_podmiany();				//funkcja sprawdzaj¹ca warunek podmiany dziewi¹tki w kolorze atutowym na kartê ze spodu stosu
	//void podmien(Talia & talia, int indeks);			//funkcja podmieniaj¹ca dziewi¹tkê atutow¹ na kartê ze spodu stosu
	//int sprawdz_meldunek();				//funkcja sprawdzaj¹ca, czy jest meldunek
};
